#!/bin/bash

#
# Example parameters:
#   api:2
#   args:task 4 modify new-task-description
#   command:modify
#   rc:/path/to/taskwarrior/rc/.taskrc
#   data:/path/to/taskwarrior/data/directory
#   version:2.5.3
#

COMMAND=$(echo "$2" | cut -f2- -d:)
GIT_REPO=$(dirname "$(echo "$5" | cut -f2 -d:)")
CONTEXT=""  # Command context info from task command.

for i in "$@"; do
    CONTEXT="${CONTEXT}${i}\n"
done

# Append more context info to commit message.
CONTEXT="${CONTEXT}host:$(uname -n)\n"
CONTEXT="${CONTEXT}date:$(date +%FT%T)"
LOG_FILE="${GIT_REPO}/git-sync.log"

function _log() {
    # Debug:
    # echo -e "$1" | tee -a "${LOG_FILE}"
    echo -e "$1" >> "${LOG_FILE}"
}

_log "${CONTEXT}"

# Prepare to check the git repo status and commit.

git -C "${GIT_REPO}" diff --exit-code HEAD >/dev/null 2>&1 
DIFF_RESULT=$?

if [[ $DIFF_RESULT -eq 0 ]]; then
    _log "No changes found this time, skip to commit."
    exit 0
fi

_log "Committing and pushing..."

# Commit changes to git repository.
MESSAGE=$(echo -e "${COMMAND}\n\n----------\n${CONTEXT}\n----------\n\nThis message is created by will's on-exit-sync script.")
git -C "${GIT_REPO}" commit -a -m "${MESSAGE}" >/dev/null 2>&1

# Now let's use git-sync in background.
(cd "${GIT_REPO}" && bash git-sync) &>>"${LOG_FILE}" & disown
